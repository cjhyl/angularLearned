1. 下载 NgRx
npm install @ngrx/store @ngrx/effects @ngrx/entity @ngrx/router-store @ngrx/store-devtools @ngrx/schematics

2. 配置 NgRx CLI
ng config cli.defaultCollection @ngrx/schematics
// angular.json
"cli": {
  "defaultCollection": "@ngrx/schematics"
}

3. 创建 Store
ng g store State --root --module app.module.ts --statePath store --stateInterface AppState
State: 创建store的固定字符
--root: 代表此store是否属于根模块，不属于根模块则不使用
--module app.module.ts: 属于哪个模块
--statePath store: 存放路径
--stateInterface AppState: 类型接口名称
有警告，应该是版本问题：
Support for camel case arguments has been deprecated and will be removed in a future major version.
Use '--state-path' instead of '--statePath'.
Support for camel case arguments has been deprecated and will be removed in a future major version.
Use '--state-interface' instead of '--stateInterface'.
告诉我应当：
使用--state-path替换--statePath
使用--state-interface替换--stateInterface

4. 创建 Action
ng g action store/actions/counter --skipTests
--skipTests: 忽略测试文件
? What should be the prefix of the action? n
? Should we generate success and failure actions? No
? Do you want to use the create function? Yes
警告：
使用--skip-tests替换--skipTests

5. 创建 Reducer
ng g reducer store/reducers/counter --skip-tests --reducers=../index.ts
--skip-tests: 忽略测试文件
--reducers=../index.ts: 作为子文件，将要规整入的父文件名称
? Should we add success and failure actions to the reducer? No
? Do you want to use the create function? Yes

6. 创建 Selector
ng g selector store/selectors/counter --skip-tests 

7. 组件类触发 Action、获取状态
